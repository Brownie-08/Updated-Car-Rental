version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_DB: car_rental_db
      POSTGRES_USER: car_rental_user
      POSTGRES_PASSWORD: car_rental_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U car_rental_user -d car_rental_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - car_rental_network

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    restart: unless-stopped
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=brownie_car_rent.settings.development
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=car_rental_db
      - DB_USER=car_rental_user
      - DB_PASSWORD=car_rental_password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - DEBUG=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "echo 'Waiting for database...' &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             echo 'Starting Django development server...' &&
             python manage.py runserver 0.0.0.0:8000"
    networks:
      - car_rental_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - car_rental_network

  # Celery Worker for background tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    restart: unless-stopped
    volumes:
      - .:/app
      - logs_volume:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=brownie_car_rent.settings.development
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=car_rental_db
      - DB_USER=car_rental_user
      - DB_PASSWORD=car_rental_password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    command: celery -A brownie_car_rent worker -l info
    networks:
      - car_rental_network

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    restart: unless-stopped
    volumes:
      - .:/app
      - logs_volume:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=brownie_car_rent.settings.development
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=car_rental_db
      - DB_USER=car_rental_user
      - DB_PASSWORD=car_rental_password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    command: celery -A brownie_car_rent beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - car_rental_network

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  redis_data:
    driver: local
  logs_volume:
    driver: local

networks:
  car_rental_network:
    driver: bridge
